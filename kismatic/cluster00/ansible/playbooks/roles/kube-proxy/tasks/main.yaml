---
  - name: create /etc/kubernetes/specs directory
    file:
      path: "{{ kubernetes_spec_dir }}"
      state: directory

  - name: copy kube-proxy.yaml to remote
    template:
      src: kube-proxy.yaml
      dest: "{{ kubernetes_spec_dir }}/kube-proxy.yaml"
      owner: "{{ kubernetes_owner }}"
      group: "{{ kubernetes_group }}"
      mode: "{{ kubernetes_service_mode }}"

  # Used during upgrades:
  # 1) figure out the pod name running on the node with --template (find the pod with nodeName == inventory_hostname)
  # 2) apply the new DS
  # 3) shutdown the existing pod and wait
  - name: get the name of the kube-proxy pod running on this node
    command: kubectl --kubeconfig {{ kubernetes_kubeconfig.kubectl }} get pods -l=k8s-app=kube-proxy --template {%raw%}'{{range .items}}{{if eq .spec.nodeName{%endraw%} "{{ inventory_hostname|lower }}"{%raw%}}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}'{%endraw%} -n kube-system
    register: pod_name
    when: upgrading is defined and upgrading|bool == true

  - name: start kube-proxy
    command: kubectl --kubeconfig {{ kubernetes_kubeconfig.kubectl }} apply -f {{ kubernetes_spec_dir }}/kube-proxy.yaml
    run_once: true

  - name: delete kube-proxy pod running on this node
    command: kubectl --kubeconfig {{ kubernetes_kubeconfig.kubectl }} delete pod {{ pod_name.stdout }} -n kube-system --now
    when: pod_name is defined and pod_name.stdout is defined and pod_name.stdout != ""

    # wait for pod to shutdown
  - name: wait until the kube-proxy pod running on this node is deleted
    command: kubectl --kubeconfig {{ kubernetes_kubeconfig.kubectl }} get pods {{ pod_name.stdout }} --ignore-not-found=true -n kube-system
    register: poddeleted
    until: poddeleted|success and poddeleted.stdout == ""
    retries: 20
    delay: 6
    when: pod_name is defined and pod_name.stdout is defined and pod_name.stdout != ""

  - name: label nodes for kube-proxy
    command: kubectl --kubeconfig {{ kubernetes_kubeconfig.kubectl }} label --overwrite nodes --selector kubernetes.io/hostname={{ inventory_hostname|lower }} kismatic/kube-proxy=true
    
  - name: get the name of the kube-proxy pod running on this node
    command: kubectl --kubeconfig {{ kubernetes_kubeconfig.kubectl }} get pods -l=k8s-app=kube-proxy --template {%raw%}'{{range .items}}{{if eq .spec.nodeName{%endraw%} "{{ inventory_hostname|lower }}"{%raw%}}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}'{%endraw%} -n kube-system
    register: pod_name
    until: pod_name is defined and pod_name.stdout is defined and pod_name.stdout != ""
    retries: 20
    delay: 6

  - name: wait until pod is in "Running" state
    command: kubectl --kubeconfig {{ kubernetes_kubeconfig.kubectl }} get pods {{ pod_name.stdout }} -o=jsonpath='{.status.phase}' -n kube-system
    register: readyPods
    until: readyPods.stdout == "Running"
    retries: 20
    delay: 6