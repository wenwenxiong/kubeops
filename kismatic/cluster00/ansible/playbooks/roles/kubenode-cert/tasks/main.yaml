---
  # setup directories
  - name: create directory for certificates
    file:
      path: "{{ kubernetes_certificates_dir }}"
      state: directory

  # copy CA certificate
  - name: copy ca.pem
    copy:
      src: "{{ tls_directory }}/ca.pem"
      dest: "{{ kubernetes_certificates.ca }}"
      owner: "{{ kubernetes_certificates_owner }}"
      group: "{{ kubernetes_certificates_group }}"
      mode: "{{ kubernetes_certificates_mode }}"

  # copy proxy-client CA certificate
  - name: copy proxy-client-ca.pem
    copy:
      src: "{{ tls_directory }}/proxy-client-ca.pem"
      dest: "{{ kubernetes_certificates.proxy_client_ca }}"
      owner: "{{ kubernetes_certificates_owner }}"
      group: "{{ kubernetes_certificates_group }}"
      mode: "{{ kubernetes_certificates_mode }}"

  # copy kubernetes control plane certificates
  - name: copy master node TLS assets
    copy:
      src: "{{ tls_directory }}/{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: "{{ kubernetes_certificates_owner }}"
      group: "{{ kubernetes_certificates_group }}"
      mode: "{{ kubernetes_certificates_mode }}"
    when: "'master' in group_names"
    with_items:
      - src: "etcd-client.pem"
        dest: "{{ kubernetes_certificates.etcd_client }}"
      - src: "etcd-client-key.pem"
        dest: "{{ kubernetes_certificates.etcd_client_key }}"
      - src: "{{ inventory_hostname }}-apiserver.pem"
        dest: "{{ kubernetes_certificates.api_server }}"
      - src: "{{inventory_hostname}}-apiserver-key.pem"
        dest: "{{ kubernetes_certificates.api_server_key }}"
      - src: "kube-scheduler.pem"
        dest: "{{ kubernetes_certificates.scheduler }}"
      - src: "kube-scheduler-key.pem"
        dest: "{{ kubernetes_certificates.scheduler_key }}"
      - src: "kube-controller-manager.pem"
        dest: "{{ kubernetes_certificates.controller_manager }}"
      - src: "kube-controller-manager-key.pem"
        dest: "{{ kubernetes_certificates.controller_manager_key }}"
      - src: "apiserver-kubelet-client.pem"
        dest: "{{ kubernetes_certificates.kube_apiserver_kubelet_client }}"
      - src: "apiserver-kubelet-client-key.pem"
        dest: "{{ kubernetes_certificates.kube_apiserver_kubelet_client_key }}"
      - src: "proxy-client.pem"
        dest: "{{ kubernetes_certificates.proxy_client }}"
      - src: "proxy-client-key.pem"
        dest: "{{ kubernetes_certificates.proxy_client_key }}"
      - src: "service-account.pem"
        dest: "{{ kubernetes_certificates.service_account }}"
      - src: "service-account-key.pem"
        dest: "{{ kubernetes_certificates.service_account_key }}"

  # copy kubelet and etcd certificates
  - name: copy kubernetes node client certificates
    copy:
      src: "{{ tls_directory }}/{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: "{{ kubernetes_certificates_owner }}"
      group: "{{ kubernetes_certificates_group }}"
      mode: "{{ kubernetes_certificates_mode }}"
    when: "['master','worker','ingress','storage'] | intersect(group_names) | length > 0"
    with_items:
      - src: "admin.pem"
        dest: "{{ kubernetes_certificates.admin }}"
      - src: "admin-key.pem"
        dest: "{{ kubernetes_certificates.admin_key }}"
      - src: "{{ inventory_hostname }}-kubelet.pem"
        dest: "{{ kubernetes_certificates.kubelet }}"
      - src: "{{ inventory_hostname }}-kubelet-key.pem"
        dest: "{{ kubernetes_certificates.kubelet_key }}"
      - src: "etcd-client.pem"
        dest: "{{ kubernetes_certificates.etcd_client }}"
      - src: "etcd-client-key.pem"
        dest: "{{ kubernetes_certificates.etcd_client_key }}"

  # Remove old certificates that were deployed in version <= 1.3.3
  - name: "remove old certificates"
    file:
      path: "/etc/kubernetes/{{ item }}"
      state: absent
    when: "upgrading is defined and upgrading|bool == true"
    with_items:
      - ca.pem
      - kubenode-key.pem
      - kubenode.pem
      - service-account-key.pem
      - service-account.pem