---
  - name: create /etc/kubernetes/specs directory
    file:
      path: "{{ kubernetes_spec_dir }}"
      state: directory
  - name: copy coredns.yaml to remote
    template:
      src: coredns.yaml
      dest: "{{ kubernetes_spec_dir }}/coredns.yaml"
  - name: start coredns service
    command: kubectl --kubeconfig {{ kubernetes_kubeconfig.kubectl }} apply -f {{ kubernetes_spec_dir }}/coredns.yaml
    register: out
  
  - block:
    - name: wait up to 5 minutes until DNS pods are ready
      command: kubectl --kubeconfig {{ kubernetes_kubeconfig.kubectl }} get deployment coredns -n kube-system -o jsonpath='{.status.availableReplicas}'
      register: readyReplicas
      until: readyReplicas.stdout|int == dns.options.replicas|int
      retries: 30
      delay: 10
      failed_when: false # We don't want this task to actually fail (We catch the failure with a custom msg in the next task)
    
    - name: find the DNS pods that failed to start
      # Get the name and status/phase for all coredns pods, and then filter out the ones that are not running.
      # Once we have those, grab the first one, and cut the status/phase out of the output.
      raw: >
        kubectl get pods -n kube-system -l k8s-app=coredns 
        --no-headers -o custom-columns=name:{.metadata.name},status:{.status.phase} | grep -v "Running" | head -n 1 | cut -d " " -f 1
      register: failedDNSPodNames
      when: readyReplicas.stdout|int != dns.options.replicas|int

    - name: get the logs of the first DNS pod that did not start up in time
      command: kubectl --kubeconfig {{ kubernetes_kubeconfig.kubectl }} logs -n kube-system {{ failedDNSPodNames.stdout_lines[0] }} --tail 15
      register: failedDNSPodLogs
      when: "'stdout_lines' in failedDNSPodNames and failedDNSPodNames.stdout_lines|length > 0"
      
    - name: fail if DNS pods are not ready
      fail:
        msg: | 
          Waited for all DNS pods to be ready, but they took longer than 5 minutes to be in the ready state.
          
          The pod's latest logs may indicate why it failed to start up:

          {{ failedDNSPodLogs.stdout }}

      when: readyReplicas.stdout|int != dns.options.replicas|int
    when: run_pod_validation|bool == true 